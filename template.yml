AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  Env:
    Type: String
    AllowedValues:
      - stg
      - prod
Resources:
  # slack event -> api gateway -> lambda -> sns -> sqs -> lambda -> slack
  SlackEventsToSnsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Env}-slack-to-sns
      Runtime: provided
      Handler: bootstrap
      CodeUri: target/slack-to-sns.zip
      Timeout: 10
      MemorySize: 256
      Environment:
        Variables:
          RUST_BACKTRACE: 1
          ENV: !Sub '${Env}'
          AWS_SNS_TOPIC_ARN: !Ref SnsTopic
      Events:
        SlackEventsApi:
          Type: Api
          Properties:
            Path: /slack
            Method: Post
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SnsTopic.TopicName
        - Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - 'ssm:GetParameter*'
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/slack-new-channel-notification/*'
        - Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - 'kms:GenerateDataKey*'
              - 'kms:Decrypt'
            Resource: !GetAtt SnsToSqsEncyptKey.Arn
  SlackEventsToSnsLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SlackEventsToSnsLambda}
      RetentionInDays: 30

  SnsToSqsEncyptKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Encrypt data in SQS queue
      Enabled: true
      KeyPolicy:
        # see: https://docs.aws.amazon.com/sns/latest/dg/sns-enable-encryption-sqs-queue-subscriptions.html
        Version: 2012-10-17
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - 'kms:*'
            Resource: '*'
          - Sid: Allow SNS to use the key
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - 'kms:GenerateDataKey*'
              - 'kms:Decrypt'
            Resource: '*'

  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: !Ref SnsToSqsEncyptKey
      Subscription:
        - Endpoint: !GetAtt SlackEventQueue.Arn
          Protocol: sqs

  SlackEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref SnsToSqsEncyptKey
  SlackEventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Id: SlackEventQueuePolicy
        Statement:
          Effect: Allow
          Principal: '*'
          Action:
            - sqs:SendMessage
          Resource: '*'
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref SnsTopic
      Queues:
        - !Ref SlackEventQueue

  SqsToSlackLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Env}-sqs-to-slack
      Runtime: provided
      Handler: bootstrap
      CodeUri: target/sqs-to-slack.zip
      Timeout: 10
      MemorySize: 256
      Environment:
        Variables:
          RUST_BACKTRACE: 1
          ENV: !Sub '${Env}'
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SlackEventQueue.Arn
            BatchSize: 10
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - SQSPollerPolicy:
            QueueName: !GetAtt SlackEventQueue.QueueName
        - KMSDecryptPolicy:
            KeyId: !Ref SnsToSqsEncyptKey
        - Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - 'ssm:GetParameter*'
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/slack-new-channel-notification/*'
  SqsToSlackLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SqsToSlackLambda}
      RetentionInDays: 30
