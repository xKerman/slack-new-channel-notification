AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  Env:
    Type: String
    AllowedValues:
      - stg
      - prod
Resources:
  # slack event -> api gateway -> lambda -> sns -> sqs -> lambda -> slack
  SlackEventsToSnsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Env}-slack-new-channel-notification
      Runtime: provided
      Handler: bootstrap
      CodeUri: target/slack-to-sns.zip
      Role: !GetAtt SlackEventsToSnsIamRole.Arn
      Timeout: 10
      MemorySize: 256
      Environment:
        Variables:
          RUST_BACKTRACE: 1
          ENV: !Sub '${Env}'
          AWS_SNS_TOPIC_ARN: !Ref SnsTopic
      Events:
        SlackEventsApi:
          Type: Api
          Properties:
            Path: /slack
            Method: Post
  SlackEventsToSnsIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SlackEventsToSnsSsmParameterStoreAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - 'ssm:GetParameter*'
              Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/slack-new-channel-notification/*'
        - PolicyName: SlackEventstoSnsPublishAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref SnsTopic
  SlackEventsToSnsLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SlackEventsToSnsLambda}
      RetentionInDays: 30

  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt SlackEventQueue.Arn
          Protocol: sqs

  SlackEventQueue:
    Type: AWS::SQS::Queue
  SlackEventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Id: SlackEventQueuePolicy
        Statement:
          Effect: Allow
          Principal: '*'
          Action:
            - sqs:SendMessage
          Resource: '*'
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref SnsTopic
      Queues:
        - !Ref SlackEventQueue

  SqsToSlackLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Env}-sqs-to-slack
      Runtime: provided
      Handler: bootstrap
      CodeUri: target/sqs-to-slack.zip
      Role: !GetAtt SqsToSlackIamRole.Arn
      Timeout: 10
      MemorySize: 256
      Environment:
        Variables:
          RUST_BACKTRACE: 1
          ENV: !Sub '${Env}'
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SlackEventQueue.Arn
            BatchSize: 10
  SqsToSlackIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SqsToSlackSsmParameterStoreAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - 'ssm:GetParameter*'
              Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/slack-new-channel-notification/*'
        - PolicyName: SqsToSlackSqsAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt SlackEventQueue.Arn
  SqsToSlackLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SqsToSlackLambda}
      RetentionInDays: 30
